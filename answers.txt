1. How did your rule that creates the sensor pico install rules in the new child pico? 
    The rule that installed rulesets into my pico was triggered by a wrangler child_created event.
    When that event was received then the rules that populated the rulesets into the child were triggered.

2. How did you ensure that your sensor picos were created before sending them the event telling them their profile was updated? 
    I had a rule that waited for the wrangler child_initialized event. This ensured that the rulesets had
    been added and initialized.

3. How did you create a test harness for your pico system?
    I used a Java Junit5 testing framework that made http calls to both the sky and event api's respectively.
    Doing so I was able to generate picos and get the information to verify the accuracy of the generation and deletion.

4. In this set up, the picos representing sensors don't need to talk to each other and the sensor management pico is the parent, so it has channels to each child. 
How could you provide channels between sensor picos if sensor-to-sensor interaction were necessary?
    I immagine that there is a way to create a channel using the eventAPI. I would have the parent create a channel on the child pico, then pass the channel
    id onto the other child that needed to talk to the original child.
